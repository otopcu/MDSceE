/**
 */
package ConceptualScenarioMetaModel.provider;

import ConceptualScenarioMetaModel.util.ConceptualScenarioMetaModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConceptualScenarioMetaModelItemProviderAdapterFactory extends ConceptualScenarioMetaModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConceptualScenarioMetaModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.EntityCharacteristic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityCharacteristicItemProvider entityCharacteristicItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.EntityCharacteristic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityCharacteristicAdapter() {
		if (entityCharacteristicItemProvider == null) {
			entityCharacteristicItemProvider = new EntityCharacteristicItemProvider(this);
		}

		return entityCharacteristicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.StateMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateMachineItemProvider stateMachineItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.StateMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateMachineAdapter() {
		if (stateMachineItemProvider == null) {
			stateMachineItemProvider = new StateMachineItemProvider(this);
		}

		return stateMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.ConceptualEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptualEntityItemProvider conceptualEntityItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.ConceptualEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptualEntityAdapter() {
		if (conceptualEntityItemProvider == null) {
			conceptualEntityItemProvider = new ConceptualEntityItemProvider(this);
		}

		return conceptualEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.ExitCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExitConditionItemProvider exitConditionItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.ExitCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExitConditionAdapter() {
		if (exitConditionItemProvider == null) {
			exitConditionItemProvider = new ExitConditionItemProvider(this);
		}

		return exitConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.PatternAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternActionItemProvider patternActionItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.PatternAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternActionAdapter() {
		if (patternActionItemProvider == null) {
			patternActionItemProvider = new PatternActionItemProvider(this);
		}

		return patternActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.PatternOfInterplay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternOfInterplayItemProvider patternOfInterplayItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.PatternOfInterplay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternOfInterplayAdapter() {
		if (patternOfInterplayItemProvider == null) {
			patternOfInterplayItemProvider = new PatternOfInterplayItemProvider(this);
		}

		return patternOfInterplayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.TriggerCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerConditionItemProvider triggerConditionItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.TriggerCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerConditionAdapter() {
		if (triggerConditionItemProvider == null) {
			triggerConditionItemProvider = new TriggerConditionItemProvider(this);
		}

		return triggerConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.Variation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariationItemProvider variationItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.Variation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariationAdapter() {
		if (variationItemProvider == null) {
			variationItemProvider = new VariationItemProvider(this);
		}

		return variationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.Exception} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExceptionItemProvider exceptionItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.Exception}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExceptionAdapter() {
		if (exceptionItemProvider == null) {
			exceptionItemProvider = new ExceptionItemProvider(this);
		}

		return exceptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.ConceptualScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptualScenarioItemProvider conceptualScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.ConceptualScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptualScenarioAdapter() {
		if (conceptualScenarioItemProvider == null) {
			conceptualScenarioItemProvider = new ConceptualScenarioItemProvider(this);
		}

		return conceptualScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ConceptualScenarioMetaModel.ScenarioIdentification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioIdentificationItemProvider scenarioIdentificationItemProvider;

	/**
	 * This creates an adapter for a {@link ConceptualScenarioMetaModel.ScenarioIdentification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioIdentificationAdapter() {
		if (scenarioIdentificationItemProvider == null) {
			scenarioIdentificationItemProvider = new ScenarioIdentificationItemProvider(this);
		}

		return scenarioIdentificationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (conceptualEntityItemProvider != null) conceptualEntityItemProvider.dispose();
		if (entityCharacteristicItemProvider != null) entityCharacteristicItemProvider.dispose();
		if (stateMachineItemProvider != null) stateMachineItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (exitConditionItemProvider != null) exitConditionItemProvider.dispose();
		if (patternActionItemProvider != null) patternActionItemProvider.dispose();
		if (patternOfInterplayItemProvider != null) patternOfInterplayItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (triggerConditionItemProvider != null) triggerConditionItemProvider.dispose();
		if (variationItemProvider != null) variationItemProvider.dispose();
		if (exceptionItemProvider != null) exceptionItemProvider.dispose();
		if (conceptualScenarioItemProvider != null) conceptualScenarioItemProvider.dispose();
		if (scenarioIdentificationItemProvider != null) scenarioIdentificationItemProvider.dispose();
	}

}
